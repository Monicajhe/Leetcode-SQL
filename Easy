# 175. Combine Two Tables

SELECT FirstName, LastName, City, State
FROM Person 
LEFT JOIN Address 
USING (PersonId)

"""

# 176. Second Highest Salary
1)
/* the first select with out FROM is to return null if no match is found. Some databases may not support it. */
SELECT(SELECT Distinct Salary 
FROM Employee
ORDER BY 1 DESC 
LIMIT 1 OFFSET 1) AS SecondHighestSalary; 

2)
/* Using MAX() will return a NULL if the value doesn't exist. */
SELECT MAX(Salary) AS SecondHighestSalary
FROM Employee 
WHERE Salary < (SELECT MAX(Salary)
                FROM Employee);

"""

# 181. Employees Earning More Than Their Managers
1) 
/* self join */
SELECT e1.Name AS Employee
FROM Employee e1, Employee e2
WHERE e1.ManagerId = e2.Id
AND e1.Salary > e2.Salary;

2) Inner join 
SELECT e.Name AS Employee 
FROM Employee e
INNER JOIN Employee m
ON e.ManagerId = m.Id
WHERE e.Salary > m.Salary;

"""

#182. Duplicate Emails
1) fastest
SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(Id) > 1;

2) self join 
SELECT DISTINCT p1.Email
FROM Person p1, Person p2
WHERE p1.Email = p2.Email
AND p1.Id < p2.Id

3) inner join 
SELECT DISTINCT p1.Email
FROM Person p1
JOIN Person p2
ON p1.Email = p2.Email AND p1.Id < p2.Id

"""

# 183. Customers Who Never Order
1) left join, Runtime: 496 ms 
SELECT Name AS Customers
FROM Customers c
LEFT JOIN Orders o
ON c.Id = o.CustomerId
WHERE o.Id IS NULL;

2) subquery, Runtime: 416 ms
SELECT Name AS Customers
FROM Customers c
WHERE Id NOT IN (SELECT CustomerId
                 FROM Orders);

"""

# 196. Delete Duplicate Emails
1) self-join, in multiple-table syntax, only matching rows from the tables listed before the FROM clause are deleted, 1969 ms
DELETE p1 FROM Person p1, Person p2
WHERE p1.Email = p2.Email
AND p1.Id > p2.Id;

2) using a middle table with select clause will solve the error 'Person' for update in FROM clause', Runtime: 1662 ms
create the temporary table which is a copy of the original table. Without that my sql will use same copy of table and 
it is problematic since inner select clause may use stale table data which has been deleted by outer query as the query is in progress.
DELETE FROM Person 
WHERE Id NOT IN (SELECT t.Id
                 FROM (SELECT MIN(Id) AS Id
                       FROM Person 
                       GROUP BY Email) t);
"""                  
                       
# 197. Rising Temperature
/* Alternative: DATE_SUB(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate */
SELECT DISTINCT w2.id 
FROM Weather w1, weather w2
WHERE DATEDIFF(w2.recordDate, w1.recordDate) = 1
AND w2.temperature > w1.temperature;

"""

# 511. Game Play Analysis I

SELECT player_id, MIN(event_date) AS first_login
FROM Activity 
GROUP BY player_id;

"""

# 512. Game Play Analysis II
1) subquery match two columns
SELECT player_id, device_id
FROM Activity
WHERE (player_id, event_date) IN (SELECT player_id, MIN(event_date)
                                  FROM Activity
                                  GROUP BY player_id)
2) window function
SELECT  DISTINCT player_id,
        FIRST_VALUE(device_id) OVER(PARTITION BY player_id ORDER BY event_date ASC) AS device_id 
FROM Activity 

"""

# 577. Employee Bonus
/* Alternative: WHERE IFNULL(bonus, 0) < 1000
SELECT name, bonus 
FROM Employee
LEFT JOIN bonus
USING(empId)
WHERE bonus < 1000
OR bonus IS NULL;

"""

# 584. Find Customer Referee

SELECT name
FROM customer 
WHERE referee_id <> 2
OR referee_id IS NULL;

"""

# 586. Customer Placing the Largest Number of Orders
1) Mulptile max customers, will return null 
WITH t AS (SELECT COUNT(order_number) AS order_count
           FROM Orders
           GROUP BY customer_number)
           
SELECT customer_number
FROM Orders
GROUP BY customer_number 
HAVING COUNT(order_number) = (SELECT MAX(order_count)
                              FROM t)

2) It is guaranteed that exactly one customer will have placed more orders than any other customer.
SELECT customer_number
FROM Orders
GROUP BY customer_number 
ORDER BY COUNT(DISTINCT order_number) DESC

3)
SELECT customer_number
FROM orders
GROUP BY customer_number
HAVING COUNT(DISTINCT order_number) >= ALL(SELECT COUNT(customer_number)
                                           FROM orders
                                           GROUP BY customer_number)
                                           
"""

# 595. Big Countries

SELECT name, population, area
FROM World
WHERE area > 3000000 OR population > 25000000;

"""

# 596. Classes More Than 5 Students

SELECT class
FROM courses
GROUP BY class
HAVING COUNT(DISTINCT student) >= 5;

"""

# 597. Friend Requests I: Overall Acceptance Rate

SELECT 
IFNULL(ROUND(COUNT(DISTINCT requester_id, accepter_id) / COUNT(DISTINCT sender_id, send_to_id), 2), 0.00) AS accept_rate
FROM FriendRequest, RequestAccepted;

"""

# 603. Consecutive Available Seats

1)
SELECT seat_id 
FROM cinema
WHERE free = 1
AND 
(seat_id - 1 IN (SELECT seat_id
                   FROM cinema
                   WHERE free= 1)
OR seat_id + 1 IN (SELECT seat_id
                   FROM cinema
                   WHERE free= 1));

2) self join, alternaive: ABS(a.seat_id - b.seat_id) = 1
SELECT DISTINCT a.seat_id
FROM cinema a, cinema b
WHERE (a.seat_id = b.seat_id + 1 OR a.seat_id = b.seat_id - 1)
AND (a.free = 1 AND b.free = 1)

3)
WITH t AS (SELECT seat_id,
                  free,
                  LAG(free, 1) OVER (ORDER BY seat_id) as lag_free,
                  LEAD(free, 1) OVER (ORDER BY seat_id) as lead_free
           FROM cinema)
SELECT seat_id
FROM t 
WHERE (free = 1 AND lag_free = 1)
OR (free = 1 AND lead_free = 1)
ORDER BY seat_id;

"""

# 607. Sales Person

1)
SELECT name 
FROM salesperson 
WHERE sales_id NOT IN (SELECT sales_id
                       FROM orders 
                       JOIN company USING (com_id)
                       WHERE name = 'RED')

2)
SELECT s.name
FROM company c 
JOIN orders o
ON c.com_id = o.com_id AND c.name = 'RED'
RIGHT JOIN salesperson s 
USING (sales_id)
WHERE o.sales_id IS NULL;
                                  
"""

# 610. Triangle Judgement
1)
SELECT x, y, z, 
       CASE WHEN x + y > z AND x + z > y AND z + y > x THEN 'Yes' ELSE 'No' END AS triangle
FROM triangle 

2) 
SELECT x,y,z, IF(x+y>z and y+z>x and x+z>y, 'Yes', 'No') as 'triangle'
FROM triangle;

"""

# 613. Shortest Distance in a Line
1)
SELECT MIN(ABS(a.x - b.x)) AS shortest
FROM point a, point b 
WHERE a.x != b.x;

2)
SELECT MIN(a.x - b.x) AS shortest
FROM point a, point b
WHERE a.x > b.x;

"""

# 619. Biggest Single Number

1) faster than 3)
SELECT MAX(num) as num
FROM (SELECT num
      FROM my_numbers 
      GROUP BY num
      HAVING COUNT(num) = 1) t

2)
SELECT IFNULL((SELECT num
       FROM my_numbers 
       GROUP BY num
       HAVING COUNT(num) = 1
       ORDER BY num DESC 
       LIMIT 1), NULL) num;

3)
WITH t AS(
    SELECT num
    FROM my_numbers 
    GROUP BY num
    HAVING COUNT(*) = 1)
SELECT MAX(num) AS num
FROM t;

"""

# 620. Not Boring Movies

SELECT *
FROM cinema 
WHERE id % 2 != 0
AND description NOT LIKE '%boring%'
ORDER BY rating DESC;

"""

# 627. Swap Salary

UPDATE Salary 
SET sex = IF(sex = 'f', 'm','f');

"""

# 1050. Actors and Directors Who Cooperated At Least Three Times

SELECT actor_id, director_id
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(*) >= 3

"""

# 1068. Product Sales Analysis I

SELECT product_name, year, price 
FROM Sales
JOIN Product 
USING (product_id)

"""

# 1069. Product Sales Analysis II

SELECT product_id, SUM(quantity) AS total_quantity
FROM Sales 
GROUP BY product_id

"""

# 1075. Project Employees I

SELECT project_id, ROUND(AVG(experience_years), 2) AS average_years
FROM Project 
JOIN Employee 
USING (employee_id)
GROUP BY project_id

"""

# 1076. Project Employees II
1)
SELECT project_id
FROM Project 
GROUP BY project_id
HAVING COUNT(*) = (SELECT COUNT(*)
                   FROM Project
                   GROUP BY project_id
                   ORDER BY 1 DESC
                   LIMIT 1);

2) 
WITH t AS
(SELECT project_id, COUNT(*) AS num
FROM Project
GROUP BY project_id)

SELECT project_id
FROM t 
WHERE num = (SELECT MAX(num)
             FROM t);
 
3) 
WITH t AS(
SELECT project_id, DENSE_RANK() OVER (ORDER BY COUNT(employee_id) DESC) as rk
FROM Project 
GROUP BY project_id
)
SELECT project_id
FROM t
WHERE rk = 1;

"""

# 1082. Sales Analysis I
1)
WITH t AS(
SELECT seller_id, SUM(price) AS total 
FROM Sales
GROUP BY seller_id)

SELECT seller_id 
FROM t
WHERE total  = (SELECT MAX(total)
               FROM t)
               
2)
SELECT seller_id
FROM Sales
GROUP BY seller_id
HAVING SUM(price) >= ALL (SELECT SUM(PRICE)
                          FROM Sales
                          GROUP BY seller_id)
                          
3)
SELECT seller_id
FROM (SELECT seller_id, RANK() OVER(ORDER BY SUM(price) DESC) AS rk
      FROM Sales
      GROUP BY seller_id) t
WHERE rk = 1

"""

# 1083. Sales Analysis II
1)
SELECT DISTINCT buyer_id
FROM Sales 
JOIN Product USING (product_id)
WHERE buyer_id NOT IN (SELECT buyer_id
                       FROM Product 
                       JOIN Sales USING (product_id) 
                       WHERE product_name = 'iPhone' )
AND product_name = 'S8';
2)
SELECT DISTINCT buyer_id
FROM Sales
JOIN Product USING (product_id)
GROUP BY buyer_id
HAVING SUM(CASE WHEN product_name = 's8' THEN 1 ELSE 0 END) >= 1
AND SUM(CASE WHEN product_name = 'iphone' THEN 1 ELSE 0 END) = 0;

"""

# 1084. Sales Analysis III
1) 
SELECT DISTINCT product_id, product_name
FROM Sales 
JOIN Product USING (product_id)
WHERE product_id NOT IN (SELECT product_id
                           FROM Sales
                           WHERE sale_date < '2019-01-01' OR sale_date > '2019-03-31')

2)
SELECT product_id, product_name
FROM Sales 
JOIN Product USING (product_id)
GROUP BY product_id
HAVING MIN(sale_date) >= '2019-01-01' AND MAX(sale_date) <= '2019-03-31' 

3)
SELECT product_id, product_name
FROM Sales 
JOIN Product 
USING(product_id)
GROUP BY product_id
HAVING MIN(sale_date) >= '2019-01-01' AND MAX(sale_date) <= '2019-03-31' 
