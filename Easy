# 175. Combine Two Tables

SELECT FirstName, LastName, City, State
FROM Person 
LEFT JOIN Address 
USING (PersonId)

"""

# 176. Second Highest Salary
1)
/* the first select with out FROM is to return null if no match is found. Some databases may not support it. */
SELECT(SELECT Distinct Salary 
FROM Employee
ORDER BY 1 DESC 
LIMIT 1 OFFSET 1) AS SecondHighestSalary; 

2)
/* Using MAX() will return a NULL if the value doesn't exist. */
SELECT MAX(Salary) AS SecondHighestSalary
FROM Employee 
WHERE Salary < (SELECT MAX(Salary)
                FROM Employee);

"""

# 181. Employees Earning More Than Their Managers
1) 
/* self join */
SELECT e1.Name AS Employee
FROM Employee e1, Employee e2
WHERE e1.ManagerId = e2.Id
AND e1.Salary > e2.Salary;

2) Inner join 
SELECT e.Name AS Employee 
FROM Employee e
INNER JOIN Employee m
ON e.ManagerId = m.Id
WHERE e.Salary > m.Salary;

"""

#182. Duplicate Emails
1) fastest
SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(Id) > 1;

2) self join 
SELECT DISTINCT p1.Email
FROM Person p1, Person p2
WHERE p1.Email = p2.Email
AND p1.Id < p2.Id

3) inner join 
SELECT DISTINCT p1.Email
FROM Person p1
JOIN Person p2
ON p1.Email = p2.Email AND p1.Id < p2.Id

"""

# 183. Customers Who Never Order
1) left join, Runtime: 496 ms 
SELECT Name AS Customers
FROM Customers c
LEFT JOIN Orders o
ON c.Id = o.CustomerId
WHERE o.Id IS NULL;

2) subquery, Runtime: 416 ms
SELECT Name AS Customers
FROM Customers c
WHERE Id NOT IN (SELECT CustomerId
                 FROM Orders);

"""

# 196. Delete Duplicate Emails
1) self-join, in multiple-table syntax, only matching rows from the tables listed before the FROM clause are deleted, 1969 ms
DELETE p1 FROM Person p1, Person p2
WHERE p1.Email = p2.Email
AND p1.Id > p2.Id;

2) using a middle table with select clause will solve the error 'Person' for update in FROM clause', Runtime: 1662 ms
create the temporary table which is a copy of the original table. Without that my sql will use same copy of table and 
it is problematic since inner select clause may use stale table data which has been deleted by outer query as the query is in progress.
DELETE FROM Person 
WHERE Id NOT IN (SELECT t.Id
                 FROM (SELECT MIN(Id) AS Id
                       FROM Person 
                       GROUP BY Email) t);
"""                  
                       
# 197. Rising Temperature
/* Alternative: DATE_SUB(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate */
SELECT DISTINCT w2.id 
FROM Weather w1, weather w2
WHERE DATEDIFF(w2.recordDate, w1.recordDate) = 1
AND w2.temperature > w1.temperature;

"""

# 511. Game Play Analysis I

SELECT player_id, MIN(event_date) AS first_login
FROM Activity 
GROUP BY player_id;

"""

# 512. Game Play Analysis II
1) subquery match two columns
SELECT player_id, device_id
FROM Activity
WHERE (player_id, event_date) IN (SELECT player_id, MIN(event_date)
                                  FROM Activity
                                  GROUP BY player_id)
2) window function
SELECT  DISTINCT player_id,
        FIRST_VALUE(device_id) OVER(PARTITION BY player_id ORDER BY event_date ASC) AS device_id 
FROM Activity 

"""

# 577. Employee Bonus
/* Alternative: WHERE IFNULL(bonus, 0) < 1000
SELECT name, bonus 
FROM Employee
LEFT JOIN bonus
USING(empId)
WHERE bonus < 1000
OR bonus IS NULL;

"""

# 584. Find Customer Referee

SELECT name
FROM customer 
WHERE referee_id <> 2
OR referee_id IS NULL;

"""

# 586. Customer Placing the Largest Number of Orders
1) Mulptile max customers, will return null 
WITH t AS (SELECT COUNT(order_number) AS order_count
           FROM Orders
           GROUP BY customer_number)
           
SELECT customer_number
FROM Orders
GROUP BY customer_number 
HAVING COUNT(order_number) = (SELECT MAX(order_count)
                              FROM t)

2) It is guaranteed that exactly one customer will have placed more orders than any other customer.
SELECT customer_number
FROM Orders
GROUP BY customer_number 
ORDER BY COUNT(DISTINCT order_number) DESC

3)
SELECT customer_number
FROM orders
GROUP BY customer_number
HAVING COUNT(DISTINCT order_number) >= ALL(SELECT COUNT(customer_number)
                                           FROM orders
                                           GROUP BY customer_number)
                                           
"""

# 595. Big Countries

SELECT name, population, area
FROM World
WHERE area > 3000000 OR population > 25000000;

"""

# 596. Classes More Than 5 Students

SELECT class
FROM courses
GROUP BY class
HAVING COUNT(DISTINCT student) >= 5;

"""

# 597. Friend Requests I: Overall Acceptance Rate

SELECT 
IFNULL(ROUND(COUNT(DISTINCT requester_id, accepter_id) / COUNT(DISTINCT sender_id, send_to_id), 2), 0.00) AS accept_rate
FROM FriendRequest, RequestAccepted;

"""

# 603. Consecutive Available Seats

1)
SELECT seat_id 
FROM cinema
WHERE free = 1
AND 
(seat_id - 1 IN (SELECT seat_id
                   FROM cinema
                   WHERE free= 1)
OR seat_id + 1 IN (SELECT seat_id
                   FROM cinema
                   WHERE free= 1));

2) self join, alternaive: ABS(a.seat_id - b.seat_id) = 1
SELECT DISTINCT a.seat_id
FROM cinema a, cinema b
WHERE (a.seat_id = b.seat_id + 1 OR a.seat_id = b.seat_id - 1)
AND (a.free = 1 AND b.free = 1)

3)
WITH t AS (SELECT seat_id,
                  free,
                  LAG(free, 1) OVER (ORDER BY seat_id) as lag_free,
                  LEAD(free, 1) OVER (ORDER BY seat_id) as lead_free
           FROM cinema)
SELECT seat_id
FROM t 
WHERE (free = 1 AND lag_free = 1)
OR (free = 1 AND lead_free = 1)
ORDER BY seat_id;

"""

# 607. Sales Person

1)
SELECT name 
FROM salesperson 
WHERE sales_id NOT IN (SELECT sales_id
                       FROM orders 
                       JOIN company USING (com_id)
                       WHERE name = 'RED')

2)
SELECT s.name
FROM company c 
JOIN orders o
ON c.com_id = o.com_id AND c.name = 'RED'
RIGHT JOIN salesperson s 
USING (sales_id)
WHERE o.sales_id IS NULL;
                                  
"""

# 610. Triangle Judgement
1)
SELECT x, y, z, 
       CASE WHEN x + y > z AND x + z > y AND z + y > x THEN 'Yes' ELSE 'No' END AS triangle
FROM triangle 

2) 
SELECT x,y,z, IF(x+y>z and y+z>x and x+z>y, 'Yes', 'No') as 'triangle'
FROM triangle;

"""

# 613. Shortest Distance in a Line
1)
SELECT MIN(ABS(a.x - b.x)) AS shortest
FROM point a, point b 
WHERE a.x != b.x;

2)
SELECT MIN(a.x - b.x) AS shortest
FROM point a, point b
WHERE a.x > b.x;

"""

# 619. Biggest Single Number

1) faster than 3)
SELECT MAX(num) as num
FROM (SELECT num
      FROM my_numbers 
      GROUP BY num
      HAVING COUNT(num) = 1) t

2)
SELECT IFNULL((SELECT num
       FROM my_numbers 
       GROUP BY num
       HAVING COUNT(num) = 1
       ORDER BY num DESC 
       LIMIT 1), NULL) num;

3)
WITH t AS(
    SELECT num
    FROM my_numbers 
    GROUP BY num
    HAVING COUNT(*) = 1)
SELECT MAX(num) AS num
FROM t;

"""

# 620. Not Boring Movies

SELECT *
FROM cinema 
WHERE id % 2 != 0
AND description NOT LIKE '%boring%'
ORDER BY rating DESC;

"""

# 627. Swap Salary

UPDATE Salary 
SET sex = IF(sex = 'f', 'm','f');

"""

# 1050. Actors and Directors Who Cooperated At Least Three Times

SELECT actor_id, director_id
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(*) >= 3

"""

# 1068. Product Sales Analysis I

SELECT product_name, year, price 
FROM Sales
JOIN Product 
USING (product_id)

"""

# 1069. Product Sales Analysis II

SELECT product_id, SUM(quantity) AS total_quantity
FROM Sales 
GROUP BY product_id

"""

# 1075. Project Employees I

SELECT project_id, ROUND(AVG(experience_years), 2) AS average_years
FROM Project 
JOIN Employee 
USING (employee_id)
GROUP BY project_id

"""

# 1076. Project Employees II
1)
SELECT project_id
FROM Project 
GROUP BY project_id
HAVING COUNT(*) = (SELECT COUNT(*)
                   FROM Project
                   GROUP BY project_id
                   ORDER BY 1 DESC
                   LIMIT 1);

2) 
WITH t AS
(SELECT project_id, COUNT(*) AS num
FROM Project
GROUP BY project_id)

SELECT project_id
FROM t 
WHERE num = (SELECT MAX(num)
             FROM t);
 
3) 
WITH t AS(
SELECT project_id, DENSE_RANK() OVER (ORDER BY COUNT(employee_id) DESC) as rk
FROM Project 
GROUP BY project_id
)
SELECT project_id
FROM t
WHERE rk = 1;

"""

# 1082. Sales Analysis I
1)
WITH t AS(
SELECT seller_id, SUM(price) AS total 
FROM Sales
GROUP BY seller_id)

SELECT seller_id 
FROM t
WHERE total  = (SELECT MAX(total)
               FROM t)
               
2)
SELECT seller_id
FROM Sales
GROUP BY seller_id
HAVING SUM(price) >= ALL (SELECT SUM(PRICE)
                          FROM Sales
                          GROUP BY seller_id)
                          
3)
SELECT seller_id
FROM (SELECT seller_id, RANK() OVER(ORDER BY SUM(price) DESC) AS rk
      FROM Sales
      GROUP BY seller_id) t
WHERE rk = 1

"""

# 1083. Sales Analysis II
1)
SELECT DISTINCT buyer_id
FROM Sales 
JOIN Product USING (product_id)
WHERE buyer_id NOT IN (SELECT buyer_id
                       FROM Product 
                       JOIN Sales USING (product_id) 
                       WHERE product_name = 'iPhone' )
AND product_name = 'S8';
2)
SELECT DISTINCT buyer_id
FROM Sales
JOIN Product USING (product_id)
GROUP BY buyer_id
HAVING SUM(CASE WHEN product_name = 's8' THEN 1 ELSE 0 END) >= 1
AND SUM(CASE WHEN product_name = 'iphone' THEN 1 ELSE 0 END) = 0;

"""

# 1084. Sales Analysis III
1) 
SELECT DISTINCT product_id, product_name
FROM Sales 
JOIN Product USING (product_id)
WHERE product_id NOT IN (SELECT product_id
                           FROM Sales
                           WHERE sale_date < '2019-01-01' OR sale_date > '2019-03-31')

2)
SELECT product_id, product_name
FROM Sales 
JOIN Product USING (product_id)
GROUP BY product_id
HAVING MIN(sale_date) >= '2019-01-01' AND MAX(sale_date) <= '2019-03-31' 

3)
SELECT product_id, product_name
FROM Sales 
JOIN Product 
USING(product_id)
GROUP BY product_id
HAVING MIN(sale_date) >= '2019-01-01' AND MAX(sale_date) <= '2019-03-31' 

"""

# 1113. Reported Posts

SELECT extra AS report_reason, COUNT(DISTINCT post_id) AS report_count
FROM Actions
WHERE action_date = '2019-07-04' AND extra IS NOT NULL AND action = 'report'
GROUP BY report_reason 

"""

# 1141. User Activity for the Past 30 Days I

SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users 
FROM Activity
WHERE activity_date BETWEEN SUBDATE('2019-07-27', INTERVAL 29 DAY) AND '2019-07-27'
GROUP BY activity_date;

"""

# 1142. User Activity for the Past 30 Days II

SELECT IFNULL(ROUND(COUNT(DISTINCT session_id) / COUNT(DISTINCT user_id), 2), 0.00) AS average_sessions_per_user
FROM Activity
WHERE activity_date BETWEEN SUBDATE('2019-07-27', INTERVAL 29 DAY) AND '2019-07-27'

"""

# 1148. Article Views I

SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id = viewer_id
ORDER BY author_id;

"""

# 1173. Immediate Food Delivery I

1)
SELECT ROUND(100 * COUNT(DISTINCT delivery_id) / (SELECT COUNT(delivery_id) FROM Delivery), 2) AS immediate_percentage 
FROM Delivery
WHERE order_date = customer_pref_delivery_date

2)
SELECT ROUND(100 * SUM(IF(order_date = customer_pref_delivery_date, 1, 0)) / COUNT(delivery_id), 2) AS immediate_percentage
FROM Delivery

3)
select round(100 * sum(order_date = customer_pref_delivery_date) / count(*), 2) as immediate_percentage from Delivery;

"""

# 1179. Reformat Department Table

SELECT id, MIN(IF(month = 'Jan', revenue, NULL)) AS Jan_Revenue,
           MIN(IF(month = 'Feb', revenue, NULL)) AS Feb_Revenue,
           MIN(IF(month = 'Mar', revenue, NULL)) AS Mar_Revenue,
           MIN(IF(month = 'Apr', revenue, NULL)) AS Apr_Revenue,
           MIN(IF(month = 'May', revenue, NULL)) AS May_Revenue,
           MIN(IF(month = 'Jun', revenue, NULL)) AS Jun_Revenue,
           MIN(IF(month = 'Jul', revenue, NULL)) AS Jul_Revenue,
           MIN(IF(month = 'Aug', revenue, NULL)) AS Aug_Revenue,
           MIN(IF(month = 'Sep', revenue, NULL)) AS Sep_Revenue,
           MIN(IF(month = 'Oct', revenue, NULL)) AS Oct_Revenue,
           MIN(IF(month = 'Nov', revenue, NULL)) AS Nov_Revenue,
           MIN(IF(month = 'Dec', revenue, NULL)) AS Dec_Revenue
FROM Department
GROUP BY id;

"""

# 1211. Queries Quality and Percentage

SELECT query_name, 
       ROUND(AVG(rating / position), 2) AS quality,
       ROUND(100 * SUM(rating < 3)/ COUNT(query_name), 2) AS poor_query_percentage 
FROM Queries
GROUP BY query_name

"""

# 1241. Number of Comments per Post

SELECT s.sub_id AS post_id,
       (SELECT COUNT(DISTINCT sub_id)
       FROM Submissions s1
       WHERE s.sub_id = s1.parent_id) AS number_of_comments
FROM Submissions s
WHERE s.parent_id IS NULL
GROUP BY s.sub_id
ORDER BY post_id; 

"""

# 1251. Average Selling Price

SELECT Prices.product_id, ROUND(SUM(Prices.price * units) / SUM(units), 2) AS average_price
FROM Prices 
JOIN UnitsSold 
ON Prices.product_id = UnitsSold.product_id AND purchase_date BETWEEN start_date AND end_date 
GROUP BY product_id;

or 

SELECT product_id, ROUND(SUM(price * units) / SUM(units), 2) AS average_price
FROM Prices 
JOIN UnitsSold USING (product_id)
WHERE purchase_date BETWEEN start_date AND end_date
GROUP BY product_id;

"""

# 1280. Students and Examinations

1)
SELECT student.student_id,student.student_name,subject.subject_name,COUNT(exam.subject_name) as attended_exams
FROM Students as student
JOIN Subjects as subject
LEFT JOIN Examinations as exam
ON student.student_id=exam.student_id AND subject.subject_name=exam.subject_name
GROUP BY student.student_id,subject.subject_name
ORDER BY student_id,subject_name;

2) 
SELECT t.student_id, t.student_name, t.subject_name, COUNT(e.subject_name) AS attended_exams
FROM (SELECT *
      FROM Students
      CROSS JOIN Subjects) t
LEFT JOIN Examinations e
USING (student_id, subject_name)
GROUP BY 1, 2, 3
ORDER BY 1, 3

"""

# 1294. Weather Type in Each Country

SELECT country_name,
       CASE WHEN AVG(weather_state) <= 15 THEN 'Cold'
            WHEN AVG(weather_state) >= 25 THEN 'Hot'
            ELSE 'Warm' END AS weather_type
FROM Countries
JOIN Weather USING (country_id)
WHERE day LIKE '2019-11%'
GROUP BY country_name

"""

# 1303. Find the Team Size
1)
SELECT employee_id, team_size
FROM Employee
JOIN (SELECT team_id, COUNT(employee_id) AS team_size
      FROM Employee
      GROUP BY team_id) t
USING (team_id)
2)
SELECT employee_id, 
       COUNT(team_id) OVER(PARTITION BY team_id) AS team_size
FROM Employee

"""

# 1322. Ads Performance
1) Runtime: 398 ms, faster than 64.04%
SELECT ad_id,
       IFNULL(ROUND(100 * AVG(CASE WHEN action = 'clicked' THEN 1
                                   WHEN action = 'Viewed' THEN 0
                                   ELSE NULL END), 2), 0) AS ctr
FROM Ads
GROUP BY ad_id
ORDER BY ctr DESC, ad_id;
2) Runtime: 353 ms, faster than 93.34%
SELECT ad_id,
       IFNULL(ROUND(100*SUM(action = 'Clicked')/SUM(action='Clicked'or action = 'Viewed'), 2), 0) AS ctr
FROM Ads
GROUP BY ad_id 
ORDER BY ctr DESC, ad_id;

"""

# 1327. List the Products Ordered in a Period

SELECT product_name, SUM(unit) AS unit
FROM Products
JOIN Orders USING (product_id)
WHERE order_date LIKE '2020-02%' 
GROUP BY product_id
HAVING unit >= 100

"""

# 1350. Students With Invalid Departments
1) 644 ms, faster than 73.78% 
SELECT id, name
FROM Students
WHERE department_id NOT IN (SELECT id
                            FROM Departments)
2) 579 ms, faster than 97.94%
SELECT s.id, s.name
FROM Departments d
RIGHT JOIN Students s
ON s.department_id = d.id
WHERE d.name IS NULL

"""

# 1378. Replace Employee ID With The Unique Identifier

SELECT e2.unique_id, e1.name 
FROM Employees e1 
LEFT JOIN EmployeeUNI e2
USING (id);

"""

# 1407. Top Travellers

SELECT name, IFNULL(SUM(distance), 0) AS travelled_distance 
FROM Users 
LEFT JOIN Rides 
ON Users.id = Rides.user_id
GROUP BY name
ORDER BY travelled_distance DESC, name;

"""

# 1435. Create a Session Bar Chart
1) 
SELECT '[0-5>' AS 'bin', SUM(duration/60 < 5) AS 'total'
FROM Sessions
UNION
SELECT '[5-10>' AS 'bin', SUM(duration/60 >= 5 AND duration/60 < 10) AS 'total'
FROM Sessions
UNION
SELECT '[10-15>' AS 'bin', SUM(duration/60 >= 10 AND duration/60 < 15) AS 'total'
FROM Sessions
UNION
SELECT '15 or more' AS 'bin', SUM(duration/60 >= 15) AS 'total'
FROM Sessions
2)
WITH cte AS (
    SELECT '[0-5>' AS bin,  0 AS min_duration, 5*60 AS max_duration
    UNION ALL
    SELECT '[5-10>' AS bin,  5*60 AS min_duration, 10*60 AS max_duration
    UNION ALL
    SELECT '[10-15>' AS bin, 10*60 AS min_duration, 15*60 AS max_duration
    UNION ALL
    SELECT '15 or more' AS bin,  15*60 as min_duration, 2147483647 AS max_duration
    )

SELECT cte.bin, COUNT(s.session_id) AS total
FROM Sessions s
RIGHT JOIN cte 
		ON s.duration >= min_duration 
        AND s.duration < max_duration				 
GROUP BY cte.bin;
3) create a 'frame' with UNION ALL, then JOIN the aggregated results to the frame, so that even if there is no record for some categories, we can still use IFNULL to fill with 0.
SELECT b.bin, COUNT(s.session_id) AS total
FROM (SELECT session_id,
             CASE WHEN (duration / 60) >= 0 AND (duration / 60) < 5 THEN '[0-5>'
                  WHEN (duration / 60) >= 5 AND (duration / 60) < 10 THEN '[5-10>'
                  WHEN (duration / 60) >= 10 AND (duration / 60) < 15 THEN '[10-15>'
                  ELSE '15 or more' END AS bin            
      FROM Sessions) s
RIGHT JOIN (SELECT '[0-5>' AS bin
            UNION
            SELECT '[5-10>' AS bin
            UNION
            SELECT '[10-15>' AS bin
            UNION
            SELECT '15 or more' AS bin) b
USING (bin)
GROUP BY bin;

"""

# 1484. Group Sold Products By The Date

SELECT 
    sell_date,
    COUNT(DISTINCT product) AS num_sold,
    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products
FROM Activities
GROUP BY sell_date;

"""

# 1495. Friendly Movies Streamed Last Month

SELECT DISTINCT title 
FROM TVProgram 
JOIN Content using (content_id)
WHERE program_date LIKE '2020-06%' AND Kids_content = 'Y' AND content_type = 'Movies'

"""

# 1511. Customer Order Frequency
1)
SELECT c.customer_id, c.name
FROM Product p
JOIN Orders o USING (product_id)
JOIN Customers c USING (customer_id)
WHERE o.order_date LIKE '2020-06%' OR o.order_date LIKE '2020-07%'
GROUP BY c.customer_id
HAVING SUM(IF(o.order_date LIKE '2020-06%', o.quantity * p.price, 0)) >= 100
AND SUM(IF(o.order_date LIKE '2020-07%', o.quantity * p.price, 0)) >= 100 
2)
WITH cte AS (
SELECT o.customer_id, 
        SUM(CASE WHEN MONTH(o.order_date) = 06 THEN o.quantity*p.price END) AS 'June',
        SUM(CASE WHEN MONTH(o.order_date) = 07 THEN o.quantity*p.price END) AS 'July' 
FROM Orders o INNER JOIN Product p
ON p.product_id = o.product_id
GROUP BY 1
ORDER BY 1
    )
SELECT cte.customer_id, c.name
FROM cte INNER JOIN Customers c
ON cte.customer_id = c.customer_id
AND cte.June >= 100 AND cte.July >= 100
ORDER BY 1

"""

# 1517. Find Users With Valid E-Mails

SELECT user_id, name, mail
FROM Users
WHERE mail REGEXP '^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode.com$'

"""

# 1527. Patients With a Condition

SELECT patient_id, patient_name, conditions
FROM Patients 
WHERE conditions LIKE '% DIAB1%' OR conditions LIKE 'DIAB1%';

"""

# 1543. Fix Product Name Format

SELECT TRIM(LOWER(product_name)) AS product_name, LEFT(sale_date, 7) AS sale_date, COUNT(*) AS total
FROM Sales
GROUP BY 1, 2
ORDER BY product_name, sale_date;

# 1565. Unique Orders and Customers Per Month

SELECT DATE_FORMAT(order_date, '%Y-%m') AS month, COUNT(DISTINCT order_id) AS order_count, COUNT(DISTINCT customer_id) AS customer_count 
FROM Orders
WHERE invoice > 20
GROUP BY month

"""

# 1571. Warehouse Manager

1)
SELECT name AS warehouse_name, SUM(Width * Length * Height * units) AS volume
FROM Warehouse
JOIN Products USING (product_id)
GROUP BY warehouse_name 
2)
Select distinct name as warehouse_name,
SUM(units * width * length * height) over(partition by name) as volume
From warehouse as w
JOIN products as p
on w.product_id = p.product_id

"""

# 1581. Customer Who Visited but Did Not Make Any Transactions

1)
SELECT customer_id, COUNT(*) AS count_no_trans
FROM Visits v
LEFT JOIN Transactions USING (visit_id)
WHERE v.visit_id NOT IN (SELECT visit_id
                          FROM Transactions)
GROUP BY customer_id;
2)
SELECT customer_id, COUNT(*) AS count_no_trans
FROM Visits v
LEFT JOIN Transactions USING (visit_id)
WHERE transaction_id IS NULL
GROUP BY customer_id

"""

# 1587. Bank Account Summary II

SELECT name, SUM(amount) AS balance 
FROM Users 
LEFT JOIN Transactions USING (account)
GROUP BY account 
HAVING balance > 10000

"""

# 1607. Sellers With No Sales

1)
SELECT seller_name 
FROM Seller
WHERE seller_id NOT IN (SELECT seller_id
                        FROM Orders
                        WHERE YEAR(sale_date) = 2020)
ORDER BY seller_name;   
2)
SELECT seller_name 
FROM Seller s
LEFT JOIN Orders o on s.seller_id = o.seller_id and YEAR(sale_date) = 2020
where o.seller_id IS NULL
order by seller_name 

"""

# 1623. All Valid Triplets That Can Represent a Country
1)
SELECT a.student_name AS member_A,
       b.student_name AS member_B,
       c.student_name AS member_C
FROM SchoolA a 
CROSS JOIN SchoolB b
CROSS JOIN SchoolC c 
WHERE a.student_name != b.student_name 
AND a.student_name != c.student_name 
AND c.student_name != b.student_name
AND a.student_id != b.student_id
AND a.student_id != c.student_id
AND b.student_id != c.student_id;
2)
SELECT a.student_name AS member_A, b.student_name AS member_B, c.student_name AS member_C
FROM SchoolA a, SchoolB b, SchoolC c
WHERE a.student_id != b.student_id AND a.student_id != c.student_id AND b.student_id != c.student_id
AND a.student_name != b.student_name AND a.student_name != c.student_name AND b.student_name != c.student_name

"""

# 1633. Percentage of Users Attended a Contest

SELECT contest_id, ROUND(100 * COUNT(user_id)/(SELECT COUNT(*)
                                   FROM users), 2) AS percentage
FROM Users
JOIN Register USING (user_id)
GROUP BY contest_id 
ORDER BY percentage DESC, contest_id
